
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package JcupHtml;

import java_cup.runtime.*;
import Parametros.Parametros;
import EjecucionHtml.EjecucionHtml;
import Atributos.Atributos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\003\000\002\015" +
    "\002\000\002\003\014\000\002\003\012\000\002\003\003" +
    "\000\002\003\004\000\002\004\017\000\002\004\020\000" +
    "\002\004\021\000\002\004\020\000\002\011\011\000\002" +
    "\011\012\000\002\012\017\000\002\012\017\000\002\012" +
    "\020\000\002\013\012\000\002\014\017\000\002\014\020" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\003\006\011\010\001\002\000\004\002" +
    "\000\001\002\000\004\002\203\001\002\000\006\003\006" +
    "\011\010\001\002\000\006\002\ufffc\011\201\001\002\000" +
    "\006\012\011\013\012\001\002\000\004\014\161\001\002" +
    "\000\004\016\013\001\002\000\004\011\015\001\002\000" +
    "\004\011\016\001\002\000\004\012\011\001\002\000\006" +
    "\012\017\017\020\001\002\000\004\014\025\001\002\000" +
    "\004\013\021\001\002\000\004\016\022\001\002\000\010" +
    "\002\ufffd\003\uffff\011\uffff\001\002\000\006\003\006\011" +
    "\010\001\002\000\004\002\ufffe\001\002\000\004\015\026" +
    "\001\002\000\004\020\027\001\002\000\004\023\030\001" +
    "\002\000\004\020\031\001\002\000\004\016\032\001\002" +
    "\000\004\011\034\001\002\000\004\011\111\001\002\000" +
    "\004\026\035\001\002\000\004\016\036\001\002\000\004" +
    "\011\040\001\002\000\004\011\070\001\002\000\006\017" +
    "\042\027\041\001\002\000\004\014\045\001\002\000\004" +
    "\026\043\001\002\000\004\016\044\001\002\000\004\011" +
    "\ufff6\001\002\000\004\015\046\001\002\000\004\020\047" +
    "\001\002\000\006\023\051\042\050\001\002\000\004\020" +
    "\061\001\002\000\004\020\052\001\002\000\004\016\053" +
    "\001\002\000\004\021\054\001\002\000\004\011\055\001" +
    "\002\000\004\017\056\001\002\000\004\027\057\001\002" +
    "\000\004\016\060\001\002\000\004\011\ufff3\001\002\000" +
    "\004\016\062\001\002\000\004\021\063\001\002\000\004" +
    "\011\064\001\002\000\004\017\065\001\002\000\004\027" +
    "\066\001\002\000\004\016\067\001\002\000\004\011\ufff4" +
    "\001\002\000\006\017\072\027\071\001\002\000\004\014" +
    "\075\001\002\000\004\026\073\001\002\000\004\016\074" +
    "\001\002\000\004\011\ufff5\001\002\000\004\015\076\001" +
    "\002\000\004\020\077\001\002\000\004\023\100\001\002" +
    "\000\004\020\101\001\002\000\004\016\102\001\002\000" +
    "\004\021\103\001\002\000\004\011\104\001\002\000\004" +
    "\017\105\001\002\000\004\027\106\001\002\000\004\016" +
    "\107\001\002\000\004\011\ufff2\001\002\000\004\011\155" +
    "\001\002\000\006\017\113\034\112\001\002\000\004\016" +
    "\116\001\002\000\004\012\114\001\002\000\004\016\115" +
    "\001\002\000\006\002\ufff7\011\ufff7\001\002\000\004\011" +
    "\120\001\002\000\004\011\135\001\002\000\004\033\121" +
    "\001\002\000\004\014\122\001\002\000\004\015\123\001" +
    "\002\000\004\020\124\001\002\000\004\023\125\001\002" +
    "\000\004\020\126\001\002\000\004\016\127\001\002\000" +
    "\004\021\130\001\002\000\004\011\131\001\002\000\004" +
    "\017\132\001\002\000\004\033\133\001\002\000\004\016" +
    "\134\001\002\000\004\011\ufff0\001\002\000\006\017\136" +
    "\033\137\001\002\000\004\034\153\001\002\000\004\014" +
    "\140\001\002\000\004\015\141\001\002\000\004\020\142" +
    "\001\002\000\004\023\143\001\002\000\004\020\144\001" +
    "\002\000\004\016\145\001\002\000\004\021\146\001\002" +
    "\000\004\011\147\001\002\000\004\017\150\001\002\000" +
    "\004\033\151\001\002\000\004\016\152\001\002\000\004" +
    "\011\uffef\001\002\000\004\016\154\001\002\000\004\011" +
    "\ufff1\001\002\000\004\017\156\001\002\000\004\012\157" +
    "\001\002\000\004\016\160\001\002\000\006\002\ufff8\011" +
    "\ufff8\001\002\000\004\015\162\001\002\000\004\020\163" +
    "\001\002\000\004\023\164\001\002\000\004\020\165\001" +
    "\002\000\004\016\166\001\002\000\004\011\034\001\002" +
    "\000\004\011\171\001\002\000\004\011\175\001\002\000" +
    "\006\017\172\034\112\001\002\000\004\012\173\001\002" +
    "\000\004\016\174\001\002\000\006\002\ufffa\011\ufffa\001" +
    "\002\000\004\017\176\001\002\000\004\012\177\001\002" +
    "\000\004\016\200\001\002\000\006\002\ufff9\011\ufff9\001" +
    "\002\000\004\012\017\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\002\004\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\201\004\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\022" +
    "\001\001\000\006\003\023\004\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\032\001" +
    "\001\000\004\013\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\166\001\001" +
    "\000\004\013\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



EjecucionHtml ejecucion = new EjecucionHtml();
Parametros parametros = new Parametros("","","","","","","","","","");
Atributos atributosN = new Atributos("","","","","","","","");
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico
     * en el que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("Acciones");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= INICIO ACCIONES CIERRE accion INICIO FINAL ACCIONES CIERRE NT$0 instrucciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= INICIO ACCIONES CIERRE accion INICIO FINAL ACCIONES CIERRE 
            {
              Object RESULT =null;
		System.out.println("Acciones"); ejecucion.ejecucion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= accion 
            {
              Object RESULT =null;
		 ejecucion.ejecucion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // accion ::= INICIO ACCION NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE parametros INICIO FINAL ACCION CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		   System.out.println("Accion " + a ); System.out.println(parametros.toString()); ejecucion.valor(a,atributosN,parametros);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accion ::= INICIO ACCION NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE parametros atributos INICIO FINAL ACCION CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		   System.out.println("Accion " + a ); System.out.println(parametros.toString()); ejecucion.valor(a,atributosN,parametros);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accion ::= accion INICIO ACCION NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE parametros atributos INICIO FINAL ACCION CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 System.out.println("Accion " + a ); System.out.println(parametros.toString()); ejecucion.valor(a,atributosN,parametros);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // accion ::= accion INICIO ACCION NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE parametros INICIO FINAL ACCION CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		   System.out.println("Accion " + a ); System.out.println(parametros.toString()); ejecucion.valor(a,atributosN,parametros);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= INICIO PARAMETROS CIERRE INICIO FINAL PARAMETROS CIERRE 
            {
              Object RESULT =null;
		System.out.println("Parametros"  );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= INICIO PARAMETROS CIERRE parametro INICIO FINAL PARAMETROS CIERRE 
            {
              Object RESULT =null;
		System.out.println("Parametros"  );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro ::= INICIO PARAMETRO NOMBREAC IGUAL COMILLA ID COMILLA CIERRE STRING_LITERAL INICIO FINAL PARAMETRO CIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parametros.ingresar("ID",e, parametros); System.out.println("Parametro " + e );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= INICIO PARAMETRO NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE STRING_LITERAL INICIO FINAL PARAMETRO CIERRE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parametros.ingresar(b,c, parametros); System.out.println("Parametro " + b + " " + c );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= parametro INICIO PARAMETRO NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE STRING_LITERAL INICIO FINAL PARAMETRO CIERRE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parametros.ingresar(d,e, parametros); System.out.println("Parametro " + d + " " + e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atributos ::= INICIO ATRIBUTOS CIERRE atributo INICIO FINAL ATRIBUTOS CIERRE 
            {
              Object RESULT =null;
		System.out.println("Atributos");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atributo ::= INICIO ATRIBUTO NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE STRING_LITERAL INICIO FINAL ATRIBUTO CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println("Atributo  " + a + " " + b); atributosN.ingresar(a,b,atributosN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atributo ::= atributo INICIO ATRIBUTO NOMBREAC IGUAL COMILLA LETRAS COMILLA CIERRE STRING_LITERAL INICIO FINAL ATRIBUTO CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Atributo  " + a + " " + b); atributosN.ingresar(a,b,atributosN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
